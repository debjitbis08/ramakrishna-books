---
import {getCollection, getEntry} from 'astro:content';
import ThemeSwitcher from '../components/ThemeSwitcher.astro';
import BengaliText from './BengaliText.astro';
import Transliteration from './Transliteration.astro';
import GitHubIcon from '../assets/icons/github.svg';
import Contents from "./Contents.astro";

export interface Props {
  currentBook?: { id: string, data: { title: { bn: string, en: string } }};
}

const { currentBook } = Astro.props;

let sections, groupedSections;

if (currentBook) {
  // Fetch chapters for the specific book
  sections = await getCollection('books', ({ data,slug }) =>
      data.type !== 'book' && slug.startsWith(currentBook.id)
  );

  groupedSections = Object.values(sections.reduce((grouped, section) => {
    if (grouped[section.data.chapter]) {
      grouped[section.data.chapter].sections = grouped[section.data.chapter].sections.concat([section]);
      return grouped;
    } else return {
      ...grouped,
      [section.data.chapter]: {
        chapter: section.data.chapter,
        chapterTitle: section.data.chapterTitle,
        sections: [section]
      }
    };
  }, {}));
}

---
<header class="shadow-md fixed w-full backdrop-blur bg-crust/50 z-40">
  <div class="mx-auto flex justify-between items-center py-4 px-6">
    <!-- Left Section: Current Book Name -->
    <div class="flex items-center gap-2">
      <h1 id="current-book" class="text-xl font-bold hidden md:block">
        <BengaliText generateTransliteration={false}>
          {(currentBook && currentBook.data.title.bn) || "শ্রীশ্রীরামকৃষ্ণ-কথামৃত"}
        </BengaliText>
        <Transliteration>
          {(currentBook && currentBook.data.title.en) || "Sri Sri Ramakrishna Books"}
        </Transliteration>
      </h1>
      <div class="flex justify-center">
        <div
            class="relative text-left hidden"
            x-data="{
                open: false,
                init() {
                    this.$el.classList.remove('hidden');
                },
                toggle() {
                    if (this.open) {
                        return this.close()
                    }

                    this.$refs.button.focus()

                    this.open = true
                },
                close(focusAfter) {
                    if (! this.open) return

                    this.open = false

                    focusAfter && focusAfter.focus()
                }
            }"
            x-on:keydown.escape.prevent.stop="close($refs.button)"
            x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
            x-id="['contents-dropdown-button']"
        >
          <div>
            <button
                class="inline-flex justify-center rounded-md px-3 pr-0 py-1 md:py-2 text-sm font-semibold transition-colors bg-transparent focus:outline-none"
                x-ref="button"
                x-on:click="toggle()"
                :aria-expanded="open"
                :aria-controls="$id('contents-dropdown-button')"
                type="button"
            >Contents</button>
          </div>
          <div
              class="absolute left-0 z-10 mt-2 p-4 w-screen md:w-64 origin-top-left rounded-md text-text bg-crust shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
              role="menu"
              aria-orientation="vertical"
              aria-labelledby="theme-switcher-button"
              tabindex="-1"
              x-ref="panel"
              x-show="open"
              x-transition.origin.top.left
              x-on:click.outside="close($refs.button)"
              :id="$id('dropdown-button')"
              style="display: none;"
          >
            <Contents book={currentBook} />
          </div>
        </div>
      </div>
    </div>

    <!-- Right Section: Theme Selector, Language Selector, Links -->
    <div class="flex items-center gap-3">
      <!-- Theme Switcher -->
      <ThemeSwitcher />

      <!-- Language Selector -->
      <div
        class="relative text-left"
        x-data="{
          open: false,
          languages: [
            { code: 'en', name: 'English' },
            { code: 'bn', name: 'বাংলা' }
          ],
          toggle() {
            this.open = !this.open;
          },
        }"
        x-id="['language-selector']"
      >
        <button
          @click="toggle"
          class="inline-flex items-center px-3 py-1 md:py-2 text-sm font-semibold text-inactive-foreground hover:text-active-foreground transition-colors bg-transparent focus:outline-none"
        >
          <span x-text="$store.language.current === 'en' ? 'English' : 'বাংলা'"></span>
        </button>
        <div
          x-show="open"
          class="absolute right-0 z-10 mt-2 w-36 text-text origin-top-right rounded-md bg-crust shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
          x-transition
        >
          <ul>
            <template x-for="language in languages" :key="language.code">
              <li>
                <button
                  @click="$store.language.setLanguage(language.code); open = false"
                  class="px-4 py-2 text-sm w-full text-left hover:bg-surface0 rounded-md"
                >
                  <span x-text="language.name"></span>
                </button>
              </li>
            </template>
          </ul>
        </div>
      </div>

      <!-- Links (e.g., GitHub) -->
      <div>
        <a
          href="https://github.com/debjitbis08/ramakrishna-books"
          target="_blank"
          rel="noopener noreferrer"
          class="text-inactive-foreground hover:text-active-foreground transition-colors"
        >
          <GitHubIcon size={16} />
        </a>
      </div>
    </div>
  </div>
</header>

