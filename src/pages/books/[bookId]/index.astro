---
import {getCollection, getEntry} from 'astro:content';
import Layout from "../../../layouts/Layout.astro";
import Header from "../../../components/Header.astro";
import BengaliText from "../../../components/BengaliText.astro";
import Transliteration from "../../../components/Transliteration.astro";
import Contents from "../../../components/Contents.astro";

// Define `getStaticPaths` to generate all paths for `bookId`
export async function getStaticPaths() {
  const books = await getCollection('books', ({ data }) => data.type === "book");

  const paths = books.map((book) => ({
    params: { bookId: book.slug }, // Use `slug` as `bookId`
  }));

  return paths;
}


// Get the dynamic `bookId` from the URL
const { bookId } = Astro.params;

const book = await getEntry("books", `${bookId}`)

if (!book) {
  // Handle Error, for example:
  throw new Error('Could not find book');
}

// Fetch chapters for the specific book
const sections = await getCollection('books', ({ data,slug }) =>
  data.type !== 'book' && slug.startsWith(bookId)
);

const groupedSections = Object.values(sections.reduce((grouped, section) => {
  if (grouped[section.data.chapter]) {
    grouped[section.data.chapter].sections = grouped[section.data.chapter].sections.concat([section]);
    return grouped;
  } else return {
    ...grouped,
    [section.data.chapter]: {
      chapter: section.data.chapter,
      chapterTitle: section.data.chapterTitle,
      sections: [section]
    }
  };
}, {}));

// console.log("sections", groupedSections.map((sections) => sections.sections.map((section) => section.data)));
---

<Layout>
  <Header currentBook={book}/>
  <main class="p-4 pt-24 container mx-auto">
    <h2 class="text-2xl text-lavender">Contents</h2>
    {book && <Contents book={book} />}
  </main>
</Layout>
