---
import "./index.css";
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro Basics</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=Lora:ital,wght@0,400..700;1,400..700&family=Noto+Serif+Bengali:wght@100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
	</head>
	<body class="latte bg-base text-text">
		<slot />
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>

<script>
import Alpine from 'alpinejs';

setTimeout(() => {
  //  Alpine.start();
}, 100);

document.addEventListener('alpine:init', () => {
  console.log("alpine init")
  Alpine.store('theme', {
      value: 'system',

      init() {
          this.value = localStorage.getItem('theme') || 'system';
          // On page load, apply the appropriate theme
          this.applyTheme();

          // Watch for changes in system preference if the theme is 'system'
          this.watchSystemPreference();
      },

      switch(theme) {
          this.value = theme;  // Update theme value
          this.applyTheme();   // Apply the selected theme
          localStorage.setItem('theme', theme);
      },

      applyTheme() {
          if (this.value === 'system') {
              // Detect system preference (dark or light)
              const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
              // document.documentElement.classList.toggle('dark', isDarkMode);
              // document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');
              document.body.classList.remove("latte");
              document.body.classList.remove("mocha");
              document.body.classList.add(isDarkMode ? "mocha" : "latte");
          } else {
              // Apply the manually selected theme ('light' or 'dark')
              // document.documentElement.classList.toggle('dark', this.value === 'dark');
              // document.documentElement.setAttribute('data-theme', this.value === 'dark' ? 'dark' : 'light');
              document.body.classList.remove("latte");
              document.body.classList.remove("mocha");
              document.body.classList.add(this.value === "dark" ? "mocha" : "latte");
          }
      },

      watchSystemPreference() {
          // Watch for system preference changes (e.g., user switches from dark to light mode in OS)
          window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
              if (this.value === 'system') {
                  // document.documentElement.classList.toggle('dark', e.matches);
                  // document.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');
                  document.body.classList.remove("latte");
                  document.body.classList.remove("mocha");
                  document.body.classList.add(e.matches ? "mocha" : "latte");
              }
          });
      }
  });
});
  document.addEventListener('alpine:init', () => {
    console.log("alpine init")
    Alpine.store('language', {
      current: localStorage.getItem('language') || 'en', // Load from localStorage or default to 'en'

      init() {
          this.current = localStorage.getItem('language') || 'en';
      },
      setLanguage(newLanguage) {
        this.current = newLanguage;
        localStorage.setItem('language', newLanguage); // Save to localStorage
      },
    });
  });
Alpine.start();
</script>
